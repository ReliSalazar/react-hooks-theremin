{"version":3,"sources":["components/ControlPad.js","index.js"],"names":["ControlSurface","styled","_templateObject","props","active","H1","_templateObject2","ControlPad","_ref2","playing","pitchControl","volumeControl","synth","pitchInterpolater","volumeInterpolater","startedRef","container","useRef","_useTrackMouseInEleme","ref","_useState","useState","_useState2","Object","slicedToArray","hovered","setHovered","_useState3","_useState4","clicked","setClicked","_useState5","_useState6","offsetLeft","setOffsetLeft","_useState7","_useState8","offsetTop","setOffsetTop","onMouseDown","onMouseUp","handleMouse","onMouseMove","_ref","clientX","clientY","current","offsetWidth","offsetHeight","onMouseOver","onMouseOut","onTouchStart","onTouchEnd","useTrackMouseInElement","useEffect","Tone","FMSynth","toMaster","CtrlInterpolate","dispose","started","index","pitch","value","volume","setNote","triggerAttack","triggerRelease","react_default","a","createElement","react","assign","GlobalStyle","createGlobalStyle","src_templateObject","reset","Container","src_templateObject2","App","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"u7BAIA,IAAMA,EAAiBC,kBAAO,MAAPA,CAAHC,IAGE,SAACC,GAAD,OAAYA,EAAMC,OAAS,UAAY,YAUvDC,EAAKJ,kBAAO,KAAPA,CAAHK,KA0FO,SAASC,IACtB,IA1CFC,EAAuBC,EAASC,EAAcC,EACtCC,EACAC,EACAC,EACAC,EAsCAC,EAAYC,mBADiBC,EAlFrC,SAAgCC,GAAK,IAAAC,EACLC,oBAAS,GADJC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC5BK,EAD4BH,EAAA,GACnBI,EADmBJ,EAAA,GAAAK,EAELN,oBAAS,GAFJO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE5BE,EAF4BD,EAAA,GAEnBE,EAFmBF,EAAA,GAAAG,EAGCV,mBAAS,GAHVW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAG5BE,EAH4BD,EAAA,GAGhBE,EAHgBF,EAAA,GAAAG,EAIDd,mBAAS,GAJRe,EAAAb,OAAAC,EAAA,EAAAD,CAAAY,EAAA,GAI5BE,EAJ4BD,EAAA,GAIjBE,EAJiBF,EAAA,GAmB7BG,EAAc,kBAAMT,GAAW,IAC/BU,EAAY,kBAAMV,GAAW,IAYnC,MAAO,CACLW,YAXkB,CAClBC,YAjBkB,SAAAC,GAA0B,IAAvBC,EAAuBD,EAAvBC,QAASC,EAAcF,EAAdE,QACxBZ,GACHW,EAAUzB,EAAI2B,QAAQb,YAAcd,EAAI2B,QAAQC,YAC7CV,GACHQ,EAAU1B,EAAI2B,QAAQT,WAAalB,EAAI2B,QAAQE,aAClDd,EAAcD,GACdK,EAAaD,IAYbY,YAVkB,kBAAMvB,GAAW,IAWnCwB,WAViB,WACjBxB,GAAW,GACXI,GAAW,IASXS,cACAY,aAAcZ,EACdC,YACAY,WAAYZ,GAKZP,aACAI,YACAZ,UACAI,WAoDEwB,CAAuBrC,GAJzBiB,EAHiCf,EAGjCe,WACAI,EAJiCnB,EAIjCmB,UACAI,EALiCvB,EAKjCuB,YACAZ,EANiCX,EAMjCW,QASF,OAxDqBpB,GAAvBD,EAkDc,CACVC,QAASoB,EACTnB,aAAcuB,EACdtB,cAAe0B,IArDI5B,QAASC,EAA+BF,EAA/BE,aAAcC,EAAiBH,EAAjBG,cACtCC,EAAQK,mBACRJ,EAAoBI,mBACpBH,EAAqBG,mBACrBF,EAAaE,kBAAO,GAE1BqC,oBAAU,WAMR,OALA1C,EAAMkC,SAAU,IAAIS,IAAKC,SAAUC,WAEnC5C,EAAkBiC,QAAU,IAAIS,IAAKG,gBAAgB,CAAC,IAAK,OAC3D5C,EAAmBgC,QAAU,IAAIS,IAAKG,gBAAgB,CAAC,GAAI,KAEpD,WACL9C,EAAMkC,QAAQa,UACd9C,EAAkBiC,QAAQa,UAC1B7C,EAAmBgC,QAAQa,YAE5B,IAEHL,oBAAU,WACR,IAAMM,EAAU7C,EAAW+B,QAC3BjC,EAAkBiC,QAAQe,MAAQnD,EAClC,IAAMoD,EAAQjD,EAAkBiC,QAAQiB,MACxCjD,EAAmBgC,QAAQe,MAAQlD,EACnC,IAAMqD,EAASlD,EAAmBgC,QAAQiB,MAE1CnD,EAAMkC,QAAQmB,QAAQH,GACtBlD,EAAMkC,QAAQkB,OAAOD,MAAQC,EAEzBvD,IAAYmD,IACdhD,EAAMkC,QAAQoB,cAAcJ,GAC5B/C,EAAW+B,SAAU,IAGlBrC,GAAWmD,IACdhD,EAAMkC,QAAQqB,iBACdpD,EAAW+B,SAAU,IAEtB,CAACrC,EAASC,EAAcC,IAmBzByD,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACjE,EAAD,6BACA+D,EAAAC,EAAAC,cAACtE,EAADuB,OAAAiD,OAAA,CAAgBpE,OAAQyB,EAASV,IAAKH,GAAeyB,40BCvH3D,IAAMgC,EAAcC,4BAAHC,IACbC,KAMEC,EAAY5E,kBAAO,MAAPA,CAAH6E,KAYTC,+JAEF,OACEX,EAAAC,EAAAC,cAACC,EAAA,SAAD,KACEH,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAACO,EAAD,KACET,EAAAC,EAAAC,cAAC/D,EAAD,eANQyE,aAalBC,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.33daada2.chunk.js","sourcesContent":["import React, { Fragment, useRef, useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Tone from \"tone\";\n\nconst ControlSurface = styled(\"div\")`\n  width: 70vh;\n  height: 70vh;\n  border: 5px solid ${(props) => (props.active ? \"#eb4d4b\" : \"#22a6b3\")};\n  padding: 2rem;\n  margin-top: 2rem;\n  cursor: crosshair;\n  background-color: #2d2d2d;\n  -webkit-box-shadow: 25px 25px 0px 0px rgba(142, 142, 142, 1);\n  -moz-box-shadow: 25px 25px 0px 0px rgba(142, 142, 142, 1);\n  box-shadow: 25px 25px 0px 0px rgba(142, 142, 142, 1);\n`;\n\nconst H1 = styled(\"h1\")`\n  @import url(\"https://fonts.googleapis.com/css2?family=Space+Mono&display=swap\");\n  font-size: 2.2rem;\n  margin: 1.2rem 0;\n  font-family: \"Space Mono\", \"Courier New\", Courier, monospace;\n  font-weight: bold;\n`;\n\nfunction useTrackMouseInElement(ref) {\n  const [hovered, setHovered] = useState(false);\n  const [clicked, setClicked] = useState(false);\n  const [offsetLeft, setOffsetLeft] = useState(0);\n  const [offsetTop, setOffsetTop] = useState(0);\n\n  const onMouseMove = ({ clientX, clientY }) => {\n    const offsetLeft =\n      (clientX - ref.current.offsetLeft) / ref.current.offsetWidth;\n    const offsetTop =\n      (clientY - ref.current.offsetTop) / ref.current.offsetHeight;\n    setOffsetLeft(offsetLeft);\n    setOffsetTop(offsetTop);\n  };\n  const onMouseOver = () => setHovered(true);\n  const onMouseOut = () => {\n    setHovered(false);\n    setClicked(false);\n  };\n  const onMouseDown = () => setClicked(true);\n  const onMouseUp = () => setClicked(false);\n\n  const handleMouse = {\n    onMouseMove,\n    onMouseOver,\n    onMouseOut,\n    onMouseDown,\n    onTouchStart: onMouseDown,\n    onMouseUp,\n    onTouchEnd: onMouseUp,\n  };\n\n  return {\n    handleMouse,\n    offsetLeft,\n    offsetTop,\n    hovered,\n    clicked,\n  };\n}\n\nfunction useTheremin({ playing, pitchControl, volumeControl }) {\n  const synth = useRef();\n  const pitchInterpolater = useRef();\n  const volumeInterpolater = useRef();\n  const startedRef = useRef(false);\n\n  useEffect(() => {\n    synth.current = new Tone.FMSynth().toMaster();\n    // pitchInterpolater.current = new Tone.CtrlInterpolate([40, 2000]);\n    pitchInterpolater.current = new Tone.CtrlInterpolate([200, 1500]);\n    volumeInterpolater.current = new Tone.CtrlInterpolate([5, -20]);\n\n    return () => {\n      synth.current.dispose();\n      pitchInterpolater.current.dispose();\n      volumeInterpolater.current.dispose();\n    };\n  }, []);\n\n  useEffect(() => {\n    const started = startedRef.current;\n    pitchInterpolater.current.index = pitchControl;\n    const pitch = pitchInterpolater.current.value;\n    volumeInterpolater.current.index = volumeControl;\n    const volume = volumeInterpolater.current.value;\n\n    synth.current.setNote(pitch);\n    synth.current.volume.value = volume;\n\n    if (playing && !started) {\n      synth.current.triggerAttack(pitch);\n      startedRef.current = true;\n    }\n\n    if (!playing && started) {\n      synth.current.triggerRelease();\n      startedRef.current = false;\n    }\n  }, [playing, pitchControl, volumeControl]);\n}\n\nexport default function ControlPad() {\n  const container = useRef();\n  const {\n    offsetLeft,\n    offsetTop,\n    handleMouse,\n    clicked,\n  } = useTrackMouseInElement(container);\n\n  useTheremin({\n    playing: clicked,\n    pitchControl: offsetLeft,\n    volumeControl: offsetTop,\n  });\n\n  return (\n    <Fragment>\n      <H1>React Hooks Theremin</H1>\n      <ControlSurface active={clicked} ref={container} {...handleMouse} />\n    </Fragment>\n  );\n}\n","import React, { Component, Fragment } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\nimport ControlPad from \"./components/ControlPad\";\n\nconst GlobalStyle = createGlobalStyle`\n  ${reset};\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nconst Container = styled(\"div\")`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100vw;\n  height: 100vh;\n  flex-direction: column;\n  background-color: #eee;\n  color: #2d2d2d;\n  user-select: none;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n      <Fragment>\n        <GlobalStyle />\n        <Container>\n          <ControlPad />\n        </Container>\n      </Fragment>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}